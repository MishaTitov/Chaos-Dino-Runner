//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""bd80a921-6efe-4e58-bfa8-5341256a6e53"",
            ""actions"": [
                {
                    ""name"": ""TouchPressInput"",
                    ""type"": ""Button"",
                    ""id"": ""b2cab2a3-8446-41f1-9de8-609d073e5ae5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPositionInput"",
                    ""type"": ""Value"",
                    ""id"": ""cfc50eb3-9d03-4eb6-ad19-e87071e8c304"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""036c25bb-def9-471c-829d-be6bfa689728"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPressInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41958cb8-dffd-45c9-9dfd-a9bf7413feca"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPositionInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""d95a5fcf-b155-4773-af2c-13f0eddf9dd6"",
            ""actions"": [
                {
                    ""name"": ""KeyboardInput"",
                    ""type"": ""Button"",
                    ""id"": ""e0463369-43c7-4e3b-b520-912a533d7fc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10cf28a7-f245-40ef-939e-9b8d76458174"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_TouchPressInput = m_Touch.FindAction("TouchPressInput", throwIfNotFound: true);
        m_Touch_TouchPositionInput = m_Touch.FindAction("TouchPositionInput", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_KeyboardInput = m_Keyboard.FindAction("KeyboardInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_TouchPressInput;
    private readonly InputAction m_Touch_TouchPositionInput;
    public struct TouchActions
    {
        private @TouchControls m_Wrapper;
        public TouchActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPressInput => m_Wrapper.m_Touch_TouchPressInput;
        public InputAction @TouchPositionInput => m_Wrapper.m_Touch_TouchPositionInput;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @TouchPressInput.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPressInput;
                @TouchPressInput.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPressInput;
                @TouchPressInput.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPressInput;
                @TouchPositionInput.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPositionInput;
                @TouchPositionInput.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPositionInput;
                @TouchPositionInput.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchPositionInput;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPressInput.started += instance.OnTouchPressInput;
                @TouchPressInput.performed += instance.OnTouchPressInput;
                @TouchPressInput.canceled += instance.OnTouchPressInput;
                @TouchPositionInput.started += instance.OnTouchPositionInput;
                @TouchPositionInput.performed += instance.OnTouchPositionInput;
                @TouchPositionInput.canceled += instance.OnTouchPositionInput;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_KeyboardInput;
    public struct KeyboardActions
    {
        private @TouchControls m_Wrapper;
        public KeyboardActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardInput => m_Wrapper.m_Keyboard_KeyboardInput;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @KeyboardInput.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnKeyboardInput;
                @KeyboardInput.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnKeyboardInput;
                @KeyboardInput.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnKeyboardInput;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @KeyboardInput.started += instance.OnKeyboardInput;
                @KeyboardInput.performed += instance.OnKeyboardInput;
                @KeyboardInput.canceled += instance.OnKeyboardInput;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface ITouchActions
    {
        void OnTouchPressInput(InputAction.CallbackContext context);
        void OnTouchPositionInput(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnKeyboardInput(InputAction.CallbackContext context);
    }
}
